// HEADERS {{{
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

#define DEFAULT 0
#define NAV     1
#define NUMPAD  2
#define MEDIA   3
#define HYPE LC(LA(LGUI))
#define RYPE RC(LA(LGUI))
// }}}
// CONFIG {{{
&mt {
    tapping-term-ms = <400>;
};

&lt {
    tapping-term-ms = <400>;
    quick-tap-ms = <250>;
};

&led_strip {
    chain-length = <21>;
};
// }}}
/ {
// COMBOS {{{
//   ╭────────────────────────╮ ╭────────────────────────╮
//   │  0   1   2   3   4   5 │ │  6   7   8   9  10  11 │
//   │ 12  13  14  15  16  17 │ │ 18  19  20  21  22  23 │
//   │ 24  25  26  27  28  29 │ │ 30  31  32  33  34  35 │
//   ╰───────────╮ 36  37  38 │ │ 39  40  41 ╭───────────╯
//           ::  ╰────────────╯ ╰────────────╯
    combos {
        compatible = "zmk,combos";
        combo_backspace {
            timeout-ms = <150>;
            key-positions = <12 18>;
            bindings = <&kp BACKSPACE>;
        };
        combo_tmux {
            timeout-ms = <50>;
            key-positions = <16 19>;
            bindings = <&kp LC(A)>;
        };
        combo_capsword {
            timeout-ms = <50>;
            key-positions = <12 23>;
            bindings = <&caps_word>;
        };
        combo_jdtag {
            timeout-ms = <50>;
            key-positions = <15 19>;
            bindings = <&jdtag>;
        };
        combo_backtick {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp GRAVE>;
        };
        combo_gui_left {
            timeout-ms = <50>;
            key-positions = <24 25>;
            bindings = <&kp LGUI>;
        };
        combo_alt_left {
            timeout-ms = <50>;
            key-positions = <12 24>;
            bindings = <&kp LALT>;
        };
        combo_gui_right {
            timeout-ms = <50>;
            key-positions = <34 35>;
            bindings = <&kp LGUI>;
        };
        combo_alt_right {
            timeout-ms = <50>;
            key-positions = <23 35>;
            bindings = <&kp LALT>;
        };
    };

// }}}
// CONDITIONAL LAYERS {{{
    conditional_layers {
        compatible = "zmk,conditional-layers";

        adjust_layer {
            if-layers = <1 2>;
            then-layer = <7>;
        };

        lighting_layer {
            if-layers = <4 5>;
            then-layer = <8>;
        };

        discord_layer {
            if-layers = <1 3>;
            then-layer = <9>;
        };

    };
// }}}
// MACROS LAYERS {{{
    macros {
        hyper: hyper {
            compatible = "zmk,behavior-macro";
            label = "hyper";
            #binding-cells = <0>;
            bindings = <&kp LCMD &kp LSHFT &kp LALT &kp LCTRL>;
        };
        mouse_keys: mouse_keys {
            compatible = "zmk,behavior-macro";
            label = "mouse_keys";
            #binding-cells = <0>;
            bindings = <&kp LALT &kp LALT &kp LALT &kp LALT &kp LALT>;
        };
        jdtag: jdtag {
            compatible = "zmk,behavior-macro";
            label = "jdtag";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LEFT_BRACE &kp AT &kp RIGHT_BRACE &kp LEFT>;
        };
        vim_save: vim_save {
            compatible = "zmk,behavior-macro";
            label = "vim_save";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp ESC &kp COLON &kp W &kp RETURN>;
        };
        vim_exit: vim_exit {
            compatible = "zmk,behavior-macro";
            label = "vim_exit";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp ESC &kp COLON &kp W &kp Q &kp RETURN>;
        };
        vim_exit_all: vim_exit_all {
            compatible = "zmk,behavior-macro";
            label = "vim_exit_all";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp ESC &kp COLON &kp Q &kp A &kp L &kp RETURN>;
        };
        tmux_ns: tmux_ns {
            compatible = "zmk,behavior-macro";
            label = "tmux_ns";
            #binding-cells = <0>;
            bindings = <&kp LC(A) &kp RPAR>;
        };
        tmux_ps: tmux_ps {
            compatible = "zmk,behavior-macro";
            label = "tmux_ps";
            #binding-cells = <0>;
            bindings = <&kp LC(A) &kp LPAR>;
        };
        tmux_nw: tmux_nw {
            compatible = "zmk,behavior-macro";
            label = "tmux_nw";
            #binding-cells = <0>;
            bindings = <&kp LC(A) &kp N>;
        };
        tmux_pw: tmux_pw {
            compatible = "zmk,behavior-macro";
            label = "tmux_pw";
            #binding-cells = <0>;
            bindings = <&kp LC(A) &kp P>;
        };
        warpd_l: warpd_l {
            compatible = "zmk,behavior-macro";
            label = "warpd_l";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(S)) &kp J &kp F>;
        };
        warpd_r: warpd_r {
            compatible = "zmk,behavior-macro";
            label = "warpd_r";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(S)) &kp K &kp F>;
        };
        warpd_j: warpd_j {
            compatible = "zmk,behavior-macro";
            label = "warpd_j";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(J))>;
        };
        warpd_k: warpd_k {
            compatible = "zmk,behavior-macro";
            label = "warpd_k";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(K))>;
        };
        ka_tog: ka_tog {
            compatible = "zmk,behavior-macro";
            label = "keyboard access toggle";
            #binding-cells = <0>;
            bindings = <&kp LC(F1)>;
        };
        f2_menu: f2_menu {
            compatible = "zmk,behavior-macro";
            label = "focus to menu";
            #binding-cells = <0>;
            bindings = <&kp LC(F2)>;
        };
        f2_dock: f2_dock {
            compatible = "zmk,behavior-macro";
            label = "focus to dock";
            #binding-cells = <0>;
            bindings = <&kp LC(F3)>;
        };
        f2_win: f2_win {
            compatible = "zmk,behavior-macro";
            label = "focus to active or next window";
            #binding-cells = <0>;
            bindings = <&kp LC(F4)>;
        };
        f2_tool: f2_tool {
            compatible = "zmk,behavior-macro";
            label = "focus to toolbar";
            #binding-cells = <0>;
            bindings = <&kp LC(F5)>;
        };
        f2_float: f2_float {
            compatible = "zmk,behavior-macro";
            label = "focus to floating window";
            #binding-cells = <0>;
            bindings = <&kp LC(F6)>;
        };
        tab_tog: tab_tog {
            compatible = "zmk,behavior-macro";
            label = "toggle tab navigation";
            #binding-cells = <0>;
            bindings = <&kp LC(F7)>;
        };
        f2_status: f2_status {
            compatible = "zmk,behavior-macro";
            label = "focus to status menus";
            #binding-cells = <0>;
            bindings = <&kp LC(F8)>;
        };
        help_menu: help_menu {
            compatible = "zmk,behavior-macro";
            label = "show help menu";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(SLASH))>;
        };
        zoom_tog: zoom_tog {
            compatible = "zmk,behavior-macro";
            label = "toggle zoom";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(N8))>;
        };
        zoom_in: zoom_in {
            compatible = "zmk,behavior-macro";
            label = "zoom in";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(EQUAL))>;
        };
        zoom_out: zoom_out {
            compatible = "zmk,behavior-macro";
            label = "zoom out";
            #binding-cells = <0>;
            bindings = <&kp LG(LA(MINUS))>;
        };
        forward: forward {
            compatible = "zmk,behavior-macro";
            label = "next tab";
            #binding-cells = <0>;
            bindings = <&kp LG(RIGHT_BRACKET)>;
        };
        backward: backward {
            compatible = "zmk,behavior-macro";
            label = "previous tab";
            #binding-cells = <0>;
            bindings = <&kp LG(LEFT_BRACKET)>;
        };
        tab_next: tab_next {
            compatible = "zmk,behavior-macro";
            label = "next tab";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(RIGHT_BRACE))>;
        };
        tab_prev: tab_prev {
            compatible = "zmk,behavior-macro";
            label = "previous tab";
            #binding-cells = <0>;
            bindings = <&kp LG(LS(LEFT_BRACE))>;
        };
        win_next: win_next {
            compatible = "zmk,behavior-macro";
            label = "next window in app";
            #binding-cells = <0>;
            bindings = <&kp LG(GRAVE)>;
        };
        win_full: win_full {
            compatible = "zmk,behavior-macro";
            label = "resize window to full screen";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(N1))>;
        };
        win_screen: win_screen {
            compatible = "zmk,behavior-macro";
            label = "move window to next screen";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LS(N1)))>;
        };
        win_half: win_half {
            compatible = "zmk,behavior-macro";
            label = "resize window half screen";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(N2))>;
        };
        win_vhalf: win_vhalf {
            compatible = "zmk,behavior-macro";
            label = "resize window half screen vert";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LS(N2)))>;
        };
        win_third: win_third {
            compatible = "zmk,behavior-macro";
            label = "resize window third screen";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(N3))>;
        };
        win_vthird: win_vthird {
            compatible = "zmk,behavior-macro";
            label = "resize window third screen vert";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LS(N3)))>;
        };
        win_quad: win_quad {
            compatible = "zmk,behavior-macro";
            label = "resize window quarter screen";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(N4))>;
        };
        win_vquad: win_vquad {
            compatible = "zmk,behavior-macro";
            label = "resize window quarter screen vert";
            #binding-cells = <0>;
            bindings = <&kp LG(LC(LS(N4)))>;
        };
        dis_up: dis_up {
            compatible = "zmk,behavior-macro";
            label = "discord next unread up";
            #binding-cells = <0>;
            bindings = <&kp LA(LS(UP))>;
        };
        dis_down: dis_down {
            compatible = "zmk,behavior-macro";
            label = "discord next unread down";
            #binding-cells = <0>;
            bindings = <&kp LA(LS(DOWN))>;
        };

    };
// }}}
// BEHAVIORS {{{
    behaviors {
        lthp: layer_tap_hold_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_HOLD_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <150>;

            //global-quick-tap;

            flavor = "hold-preferred";
            bindings =
                <&mo>,
                <&kp>;
        };
        npsh1: numpad_shift_1 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMSH_1";
            #binding-cells = <0>;
            bindings =
                <&kp KP_N1>,
                <&kp EXCLAMATION>;

            mods = <(MOD_LSFT)>;
        };
        npsh2: numpad_shift_2 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMSH_2";
            #binding-cells = <0>;
            bindings =
                <&kp KP_N2>,
                <&kp AT>;

            mods = <(MOD_LSFT)>;
        };
        npsh3: numpad_shift_3 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMSH_3";
            #binding-cells = <0>;
            bindings =
                <&kp KP_N3>,
                <&kp HASH>;

            mods = <(MOD_LSFT)>;
        };
        npsh4: numpad_shift_4 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMSH_4";
            #binding-cells = <0>;
            bindings =
                <&kp KP_N4>,
                <&kp DOLLAR>;

            mods = <(MOD_LSFT)>;
        };
        npsh5: numpad_shift_5 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMSH_5";
            #binding-cells = <0>;
            bindings =
                <&kp KP_N5>,
                <&kp PERCENT>;

            mods = <(MOD_LSFT)>;
        };
        npsh6: numpad_shift_6 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMSH_6";
            #binding-cells = <0>;
            bindings =
                <&kp KP_N6>,
                <&kp CARET>;

            mods = <(MOD_LSFT)>;
        };
        npsh7: numpad_shift_7 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMSH_7";
            #binding-cells = <0>;
            bindings =
                <&kp KP_N7>,
                <&kp AMPERSAND>;

            mods = <(MOD_LSFT)>;
        };
        npsh8: numpad_shift_8 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMSH_8";
            #binding-cells = <0>;
            bindings =
                <&kp KP_N8>,
                <&kp ASTERISK>;

            mods = <(MOD_LSFT)>;
        };
        npsh9: numpad_shift_9 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMSH_9";
            #binding-cells = <0>;
            bindings =
                <&kp KP_N9>,
                <&kp LEFT_PARENTHESIS>;

            mods = <(MOD_LSFT)>;
        };
        npsh0: numpad_shift_0 {
            compatible = "zmk,behavior-mod-morph";
            label = "NUMSH_0";
            #binding-cells = <0>;
            bindings =
                <&kp KP_N0>,
                <&kp RIGHT_PARENTHESIS>;

            mods = <(MOD_LSFT)>;
        };
    };
// }}}
// KEYMAP {{{
// n.b. label strings are truncated after 8 characters
    keymap {
        compatible = "zmk,keymap";

        /* 0 Layer */

        default {
            label = "araxia";
            bindings = <
            &lt 5 TAB   &kp Q   &kp W           &kp E             &kp R         &kp T                 &kp Y        &kp U           &kp I  &lt 2 O            &kp P         &lt 4 BACKSPACE
 &mt LEFT_CONTROL ESC   &kp A   &kp S           &kp D             &kp F         &kp G                 &kp H        &kp J           &kp K    &kp L  &lt 6 SEMICOLON  &mt RCTRL SINGLE_QUOTE
       &mt LALT GRAVE   &kp Z   &kp X           &kp C             &kp V         &kp B                 &kp N        &kp M       &kp COMMA  &kp DOT         &kp FSLH      &mt RALT BACKSLASH
                                      &mt LGUI RETURN  &mt LSHIFT LC(W)   &lthp 2 ESC           &lthp 1 ESC  &lt 3 SPACE  &mt RGUI COLON
            >;
        };

        /* 1 Layer */

        right {
            label = "function";
            bindings = <
        &kp TILDE          &kp N1  &kp N2  &kp N3  &kp N4  &kp N5        &f2_menu      &f2_dock         &f2_status    &help_menu    &f2_tool    &tab_tog
 &kp LC(LA(LGUI))          &kp N6  &kp N7  &kp N8  &kp N9  &kp N0        &kp LEFT      &kp DOWN         &kp UP        &kp RIGHT     &zoom_out   &zoom_tog
 &kp RC(LA(LGUI))  &kp KP_NUMLOCK  &trans  &trans  &trans  &trans        &kp PAGE_UP   &kp PAGE_DOWN    &kp HOME      &kp END       &zoom_in    &kp RETURN
                                   &trans  &trans  &trans                &trans        &trans           &trans
            >;
        };

        /* 2 Layer */

        numpad {
            label = "numpad";
            bindings = <
                &kp BACKSPACE    &kp COMMA    &npsh7     &npsh8     &npsh9        &npsh0    &kp LESS_THAN    &kp GREATER_THAN            &kp LPAR             &kp RPAR    &kp SEMI     &kp BSPC
                     &kp FSLH      &kp DOT    &npsh4     &npsh5     &npsh6     &kp COLON        &kp MINUS           &kp EQUAL      &kp LEFT_BRACE      &kp RIGHT_BRACE    &kp BSLH    &kp GRAVE
                    &kp SPACE    &kp EQUAL    &npsh1     &npsh2     &npsh3     &kp MINUS        &kp UNDER            &kp PLUS    &kp LEFT_BRACKET    &kp RIGHT_BRACKET    &kp PIPE    &mt LSHFT TILDE
                                                               &trans  &trans     &trans           &trans              &trans              &trans
            >;
        };

        /* 3 Layer */

        media {
            label = "media";
            bindings = <
      &trans   &kp F1   &kp F2   &kp F3   &kp F4   &kp F5            &kp C_MUTE    &kp C_PREV      &kp C_PP    &kp C_NEXT  &kp C_BRI_DN  &kp C_BRI_UP
      &trans   &kp F6   &kp F7   &kp F8   &kp F9   &kp F10          &kp C_VOL_DN  &kp C_VOL_UP  &out OUT_USB  &out OUT_BLE    &bt BT_CLR    &bt BT_PRV
      &trans   &kp F11  &kp F12  &kp F13  &kp F14  &kp F15          &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_NXT
                                 &trans   &trans   &trans                &trans        &trans        &trans
            >;
        };

        /* 4 Layer */

        window_right {
            label = "move [R]";
            bindings = <
 &trans  &kp LC(LS(Q))  &kp LC(LS(W))  &kp LC(LS(E))  &kp LC(LS(R))  &kp LC(LS(T))      &tab_prev     &tab_next    &backward      &forward    &win_next        &trans
 &trans  &kp LC(LS(A))  &kp LC(LS(S))  &kp LC(LS(D))  &kp LC(LS(F))  &kp LC(LS(G))      &win_full     &win_half    &win_third     &win_quad   &kp LG(TAB)      &kp C_POWER
 &trans  &kp LC(LS(Z))  &kp LC(LS(X))  &kp LC(LS(C))  &kp LC(LS(V))  &kp LC(LS(B))      &win_screen   &win_vhalf   &win_vthird    &win_vquad  &kp LG(LS(TAB))  &trans
                                              &trans         &trans         &trans      &trans        &trans       &trans
            >;
        };

        /* 5 Layer */

        window_left {
            label = "move [L]";
            bindings = <
      &trans   &win_next         &forward      &backward      &tab_next     &tab_prev          &kp LC(LS(Y))   &kp LC(LS(U))     &kp LC(LS(I))           &kp LC(LS(O))             &kp LC(LS(P))         &trans
 &kp C_POWER   &kp LG(TAB)       &win_quad     &win_third     &win_half     &win_full          &kp LC(LS(H))   &kp LC(LS(J))     &kp LC(LS(K))           &kp LC(LS(L))             &kp LC(LS(COLON))     &trans
      &trans   &kp LG(LS(TAB))   &win_vquad    &win_vthird    &win_vhalf    &win_screen        &kp LC(LS(N))   &kp LC(LS(M))     &kp LC(LS(LESS_THAN))   &kp LC(LS(GREATER_THAN))  &kp LC(LS(QUESTION))  &trans
                                               &trans         &trans        &trans             &trans          &trans            &trans
            >;
        };

        /* 6 Layer */

        symbol {
            label = "symbols";
            bindings = <
 &trans  &trans  &kp AMPERSAND  &kp ASTERISK   &kp LPAR  &kp GRAVE           &kp LESS_THAN  &kp GREATER_THAN  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMICOLON  &kp AMPERSAND
 &trans  &trans     &kp DOLLAR   &kp PERCENT  &kp CARET  &kp TILDE               &kp MINUS         &kp EQUAL        &kp LEFT_BRACE        &kp RIGHT_BRACE         &trans   &kp ASTERISK
 &trans  &trans       &kp EXCL        &kp AT   &kp HASH   &kp RPAR          &kp UNDERSCORE          &kp PLUS      &kp LEFT_BRACKET      &kp RIGHT_BRACKET   &kp QUESTION       &kp PIPE
                                      &trans     &trans     &trans                  &trans            &trans                &trans
            >;
        };

        /* Do not use this then-layer for regular layer switching */
        /* 7 Layer */

        adjust {
            label = "adjust";
            bindings = <
 &trans     &trans     &vim_exit_all     &trans     &trans            &to 0    &ext_power EP_TOG        &trans       &trans       &trans       &trans   &trans
 &trans     &trans         &vim_save     &trans     &trans         &warpd_l             &warpd_r      &warpd_j     &warpd_k     &tmux_pw     &tmux_ps   &trans
 &trans     &trans         &vim_exit     &trans     &trans     &out OUT_USB         &out OUT_BLE    &caps_word       &trans     &tmux_nw     &tmux_ns   &trans
                                         &trans     &trans           &trans               &trans        &trans       &trans
            >;
        };

        /* Do not use this then-layer for regular layer switching */
        /* 8 Layer */

        lighting {
            label = "lighting";
            bindings = <
 &trans  &trans  &trans  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD   &rgb_ug RGB_COLOR_HSB(25,100,0)          &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &rgb_ug RGB_SAI  &rgb_ug RGB_SAD  &rgb_ug RGB_COLOR_HSB(25,100,80)          &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &rgb_ug RGB_HUI  &rgb_ug RGB_HUD   &rgb_ug RGB_COLOR_HSB(25,0,100)          &trans  &trans  &trans  &trans  &trans  &trans
                                  &trans           &trans                            &trans          &trans  &trans  &trans
            >;
        };

        /* Do not use this then-layer for regular layer switching */
        /* 9 Layer */

        discord {
            label = "discord";
            bindings = <
 &trans     &trans     &trans     &trans     &trans     &trans          &kp LC(LS(N))   &trans           &trans      &trans           &trans   &trans
 &trans     &trans     &trans     &trans     &trans     &trans          &kp PAGE_UP     &dis_down        &dis_up     &kp PAGE_DOWN    &trans   &trans
 &trans     &trans     &trans     &trans     &trans     &trans          &kp PAGE_UP     &kp PAGE_DOWN    &kp HOME    &kp END          &trans   &trans
                                  &trans     &trans     &trans          &trans          &trans           &trans
            >;
        };

    };
};
// }}}
/* vim: set ft=c: */
