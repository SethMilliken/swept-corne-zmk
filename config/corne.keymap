/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    macros {
        hyper: hyper {
            compatible = "zmk,behavior-macro";
            label = "hyper";
            #binding-cells = <0>;
            bindings = <&kp LCMD &kp LSHFT &kp LALT &kp LCTRL>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
    &kp TAB   &kp Q   &kp W     &kp E           &kp R   &kp T           &kp Y      &kp U         &kp I    &kp O     &kp P  &kp BSPC
  &kp LCTRL   &kp A   &kp S     &kp D           &kp F   &kp G           &kp H      &kp J         &kp K    &kp L  &kp SEMI   &kp SQT
 &kp RETURN   &kp Z   &kp X     &kp C           &kp V   &kp B           &kp N      &kp M     &kp COMMA  &kp DOT  &kp FSLH   &kp ESC
                             &kp LGUI  &kp LEFT_SHIFT   &mo 1           &mo 2  &kp SPACE  &kp LEFT_ALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
 &kp GRAVE        &kp N1        &kp N2        &kp N3        &kp N4        &kp N5             &kp N6         &kp N7    &kp N8     &kp N9  &kp N0  &kp BSPC
    &hyper  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4           &kp LEFT       &kp DOWN    &kp UP  &kp RIGHT  &trans    &trans
 &kp LSHFT  &out OUT_USB  &out OUT_BLE    &bt BT_CLR    &bt BT_PRV    &bt BT_NXT          &kp PG_UP  &kp PAGE_DOWN  &kp HOME    &kp END  &trans     &to 3
                                              &trans        &trans        &trans             &trans         &trans    &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
 &kp TILDE  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT          &kp CARET   &kp AMPS  &kp KP_MULTIPLY  &kp LPAR  &kp RPAR   &kp BSPC
 &kp LCTRL    &trans  &trans    &trans    &trans     &trans          &kp MINUS  &kp EQUAL         &kp LBKT  &kp RBKT  &kp BSLH  &kp GRAVE
 &kp LSHFT    &trans  &trans    &trans    &trans     &trans          &kp UNDER   &kp PLUS         &kp LBRC  &kp RBRC  &kp PIPE  &kp TILDE
                                &trans    &trans     &trans              &mo 0     &trans           &trans
            >;
        };

        media {
            bindings = <
 &kp C_BRI_DN  &kp C_BRIGHTNESS_INC  &kp F3  &kp F4  &kp F5  &kp F6          &kp C_PREV  &kp C_PP  &kp C_NEXT  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOLUME_UP
       &trans                &trans  &trans  &trans  &trans  &trans              &trans    &trans      &trans      &trans        &trans           &trans
       &trans                &trans  &trans  &trans  &trans  &trans              &trans    &trans      &trans      &trans        &trans            &to 0
                                             &trans  &trans  &trans              &trans    &trans      &trans
            >;
        };
    };
};
